/*
第四章：变量，作用域以及内存问题
          按照ECMA-262的定义，JavaScript的变量与其他语言的变量有很大的区别。JavaScript变量松散类型的本质局决定了它只是在特定的时间用于保存特定值的一个名字而已。
          由于不存在定义某一个变量必须要保存何种数据类型的规则，变量的值及其数据类型可以在脚本的生命周期内改变。
     4.1 基本类型和基本类型的值
              Undefined、Null、Boolean、Number和String五种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。儿引用类型的值是按引用访问的。
          4.1.1  动态的属性
                   定义基本类型值和引用类型值是类似的：创建一个变量并为该变量赋值。但是当这个值保存到变量中以后，对不同类型值可以执行的操作则大相径庭。对于引用类型的值，
                   我们可以为其添加属性和方法，也可以改变和删除其属性和方法。但是不能给基本类型的值添加属性。
          4.1.2  复制变量值
                   如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。
                   当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，
                   而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。
          4.1.3  传递参数
                   ECMAScript中所有函数的参数都是按值传递的。也就是说，把函数外部的值赋值给函数内部的参数，就和把值从一个变量复制到另一个变量一样。基本类型值的传递
                   如同基本类型变量的复制一样，而引用类型值得传递就如同引用类型变量复制一样。
                   在向参数传递引用类型的值是，会把这个值在内存中地址复制给一个局部变量，因此这个局部变量的变化反映在函数的外部。
          4.1.4  检测类型
                   要检测一个变量是不是基本数据类型？第三章介绍的typeof操作符是最佳的工具。说得更具体一点，typeof操作符是确定一个变量是字符串、数值、布尔值，还是undefined的最佳工具。
                   检测对象是什么类型的对象，ECMAScript提供了instanceof操作符。语法如下： result = variable instanceof constructor.
    4.2  执行环境及作用域
            执行环境(exceution context)是JavaScript中最重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了他们各自的行为。每个执行环境都有一个与之关联的变量对象，
            环境中定义的所有变量和函数都保存在这个对象中。虽然我们编写的艾玛无法访问这个对象，但解析器在处理数据时还是会在后台使用它。
          全局环境是最外围的一个执行环境。在web浏览器中，全局执行环境被认为是window对象。
          每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在这个函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。
          当代码在一个环境中执行时，会创建变量对象的一个作用域链(scope chain)。作用域链的用途是保证在执行环境有权访问的所有变量和函数的有序访问。
          4.2.1  延长作用域链
                   try-catch语句的catch块
                   with语句
          4.2.2  没有块级作用域
                   JavaScript没有块级作用域经常会导致理解上的困惑。在其他类C语言中，由花括号封闭的代码块都有自己的作用域，因而支持根据条件来定义变量。但是在JavaScript中，
                   if语句中变量声明会将变量添加到当前的执行环境，在使用for语句更要注意这一点。
    4.3  垃圾收集
          4.3.1  标记清除
          4.3.2  引用计数
          4.3.3  性能管理
          4.3.4  管理内存
*/